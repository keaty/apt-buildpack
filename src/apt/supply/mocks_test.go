// Code generated by MockGen. DO NOT EDIT.
// Source: supply.go

package supply_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStager is a mock of Stager interface
type MockStager struct {
	ctrl     *gomock.Controller
	recorder *MockStagerMockRecorder
}

// MockStagerMockRecorder is the mock recorder for MockStager
type MockStagerMockRecorder struct {
	mock *MockStager
}

// NewMockStager creates a new mock instance
func NewMockStager(ctrl *gomock.Controller) *MockStager {
	mock := &MockStager{ctrl: ctrl}
	mock.recorder = &MockStagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStager) EXPECT() *MockStagerMockRecorder {
	return _m.recorder
}

// LinkDirectoryInDepDir mocks base method
func (_m *MockStager) LinkDirectoryInDepDir(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "LinkDirectoryInDepDir", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkDirectoryInDepDir indicates an expected call of LinkDirectoryInDepDir
func (_mr *MockStagerMockRecorder) LinkDirectoryInDepDir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LinkDirectoryInDepDir", reflect.TypeOf((*MockStager)(nil).LinkDirectoryInDepDir), arg0, arg1)
}

// DepDir mocks base method
func (_m *MockStager) DepDir() string {
	ret := _m.ctrl.Call(_m, "DepDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepDir indicates an expected call of DepDir
func (_mr *MockStagerMockRecorder) DepDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DepDir", reflect.TypeOf((*MockStager)(nil).DepDir))
}

// CacheDir mocks base method
func (_m *MockStager) CacheDir() string {
	ret := _m.ctrl.Call(_m, "CacheDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// CacheDir indicates an expected call of CacheDir
func (_mr *MockStagerMockRecorder) CacheDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CacheDir", reflect.TypeOf((*MockStager)(nil).CacheDir))
}

// MockApt is a mock of Apt interface
type MockApt struct {
	ctrl     *gomock.Controller
	recorder *MockAptMockRecorder
}

// MockAptMockRecorder is the mock recorder for MockApt
type MockAptMockRecorder struct {
	mock *MockApt
}

// NewMockApt creates a new mock instance
func NewMockApt(ctrl *gomock.Controller) *MockApt {
	mock := &MockApt{ctrl: ctrl}
	mock.recorder = &MockAptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockApt) EXPECT() *MockAptMockRecorder {
	return _m.recorder
}

// Update mocks base method
func (_m *MockApt) Update() (string, error) {
	ret := _m.ctrl.Call(_m, "Update")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockAptMockRecorder) Update() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockApt)(nil).Update))
}

// Download mocks base method
func (_m *MockApt) Download() (string, error) {
	ret := _m.ctrl.Call(_m, "Download")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (_mr *MockAptMockRecorder) Download() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Download", reflect.TypeOf((*MockApt)(nil).Download))
}

// Install mocks base method
func (_m *MockApt) Install() (string, error) {
	ret := _m.ctrl.Call(_m, "Install")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Install indicates an expected call of Install
func (_mr *MockAptMockRecorder) Install() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Install", reflect.TypeOf((*MockApt)(nil).Install))
}
